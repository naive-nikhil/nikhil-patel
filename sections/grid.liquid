{{ 'section-grid.css' | asset_url | stylesheet_tag }}

{% comment %} Grid Section {% endcomment %}

{% comment %} Modal for product popup {% endcomment %}
<div class="product-modal">
  <div class="product-modal__dialog">
    <button class="product-modal__close"><img src="{{'cross.svg' |  asset_url}}"></button>
    <div class="product-modal__body">
      <div class="product-modal__image-wrapper">
        <img class="product-modal__image" src="{{'product-image-2.png' |  asset_url}}">
      </div>
      <div class="product-modal__details">
        <p class="product-modal__title">Leather Jacket</p>
        <h2 class="product-modal__price">980,00$</h2>
        <p class="product-modal__description">
          This one-piece swimsuit is crafted from jersey featuring all allover micro Monogram motif in relief.
        </p>
      </div>
    </div>
    <div class="product-modal__color-picker">
      <p class="product-modal__label">Color</p>
      <div class="product-modal__color-options">
        <div class="product-modal__color-indicator"></div>
      </div>
    </div>
    <div class="product-modal__size-picker">
      <p class="product-modal__label">Size</p>
      <div class="product-modal__size-options">
        <div class="product-modal__size-placeholder">Choose your size</div>
        <div class="product-modal__size-toggle">
          <img class="product-modal__size-toggle-icon" src="{{'select-arrow.svg' | asset_url}}">
        </div>
      </div>
      <div class="product-modal__size-dropdown" data-isOpen="false"></div>
    </div>
    {% render 'custom-button', text: 'Add To Cart', variant: 'primary', id: 'product-modal__add-to-cart' %}
  </div>
</div>

{% comment %} Main grid for showcasing collection of products {% endcomment %}
<div class="product-grid">
  <div class="product-grid__content">
    <h1 class="product-grid__title">Tisso Vision in the wild</h1>
    <div class="product-grid__list">
      {% for product in collections.frontpage.products %}
        <div class="product-grid__item" data-product="{{ product | json |  escape }}">
          <img class="product-grid__image" src="{{ product.featured_image | img_url: '600x' }}">
        </div>
      {% endfor %}
    </div>
  </div>
</div>

{% comment %} Popup Messages {% endcomment %}
<div class="popups">
  <div class="popups__indicator"></div>
  <p class="popups__message"></p>
  <img class="popups__close" src="{{'cross.svg' |  asset_url}}">
</div>

<script>
  // Required Selectors
  
  const modalEls = {
    closeButton: document.querySelector('.product-modal__close'),
    container: document.querySelector('.product-modal'),
    image: document.querySelector('.product-modal__image'),
    title: document.querySelector('.product-modal__title'),
    price: document.querySelector('.product-modal__price'),
    description: document.querySelector('.product-modal__description'),
    cartButton: document.querySelector('#product-modal__add-to-cart')
  };

  const sizeEls = {
    placholder: document.querySelector('.product-modal__size-placeholder'),
    button: document.querySelector('.product-modal__size-toggle'),
    icon: document.querySelector('.product-modal__size-toggle-icon'),
    dropdown: document.querySelector('.product-modal__size-dropdown'),
  };

  const colorEls = {
    colorOptions: document.querySelector('.product-modal__color-options'),
    colorDivs: document.querySelectorAll('.product-modal__color-option'),
    indicator: document.querySelector('.product-modal__color-indicator'),
  };

  const popupEls = {
    popup: document.querySelector('.popups'),
    indicator: document.querySelector('.popups__indicator'),
    message: document.querySelector('.popups__message'),
    closeButton: document.querySelector('.popups__close')
  }

  const state = {
    currentProductData: null,
    selectedSize: null,
    selectedColor: null,
    softWinterJacketId: "55757105529201",
  };

  // Functions

  // Function to open modal
  function openModal(productData) {
    modalEls.container.style.display = 'flex';
    document.body.style.overflow = 'hidden';

    modalEls.image.src = productData.featured_image;
    modalEls.title.textContent = productData.title;
    modalEls.price.textContent = `${(productData.price / 100).toFixed(2)} â‚¬`;
    modalEls.description.innerHTML = productData.description;

    renderColors(productData.variants);
    renderSizes(productData.variants);
  }

  // Function to toggle dropdown (Universal)
  function toggleDropdown({ open, el, icon } = {}) {
    let isOpen = el.dataset.isOpen === 'true';
    isOpen = open ?? !isOpen;
    el.style.height = isOpen ? '200%' : '0';
    if (icon) {
      icon.style.transform = isOpen ? 'rotate(-180deg)' : 'rotate(0)';
    }
    el.dataset.isOpen = isOpen;
  }

  function renderColors(variants) {
    const colors = [...new Set(variants.map((v) => v.option2).filter(Boolean))];
    colorEls.colorOptions.innerHTML = colors.map((color)=> `<div class="product-modal__color-option" data-color="${color}">${color}</div>`).join('');
    colorEls.colorOptions.appendChild(colorEls.indicator);
  }

  function renderSizes(variants) {
    const sizes = [...new Set(variants.map((v) => v.option1).filter(Boolean))];
    sizeEls.dropdown.innerHTML = sizes.map((size) => `<div class='product-modal__size-option' data-selected="" data-size="${size}">${size}</div>`).join('');
  }

  // Function to close modal
  function closeModal() {
    modalEls.container.style.display = 'none';
    document.body.style.overflow = '';
    colorEls.indicator.style.transform = "translateX(0)";
    sizeEls.placholder.textContent = 'Choose your size';
  }

  // Function to add items in the cart
  const addToCart = async ({variantId, quantity}={})=>{
    try {
      const res = await fetch('/cart/add.js', {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({id: variantId, quantity: quantity})
      });

      const data = await res.json();
      console.log("Added to Cart", data);
    } catch (err) {
      console.error(err);
    }
  }


  // Function for showing popup messages
  let popupTimeout;
  function showPopup(message, duration = 5000) {
    clearTimeout(popupTimeout);

    popupEls.message.textContent = message;
    popupEls.popup.classList.add("active");

    popupEls.indicator.style.transition = "none";
    popupEls.indicator.style.width = "100%";

    void popupEls.indicator.offsetWidth;

    popupEls.indicator.style.transition = `width ${duration}ms linear`;
    popupEls.indicator.style.width = "0";

    popupTimeout = setTimeout(() => {
      popupEls.popup.classList.remove("active");
    }, duration);
  }

  // Function which handles click on the add to cart button
  function handleAddToCart(){
    const currentVariant = [];
    currentVariant.push(state.selectedSize, state.selectedColor);

    const selectedVariant = state.currentProductData.variants.find(variant=>variant.options.length === currentVariant.length && variant.options.every((val, idx)=> val === currentVariant[idx])).id;


    setTimeout(()=>{
      addToCart({variantId: selectedVariant});
      showPopup("Product added to cart successfully")
    }, 1000)
    
    
    
    if(['M', 'Black'].every((val, idx)=>val===currentVariant[idx])){
      setTimeout(()=>{
        addToCart({variantId: state.softWinterJacketId});
        showPopup("Congratulation, You got one Soft winter Jacket on your last purchase");
      }, 7000)
    }
    closeModal();
  }

  // Event Listeners
  

  // Event listener for modal close button
  modalEls.closeButton.addEventListener('click', () => {
    toggleDropdown({ open: false, el: sizeEls.dropdown, icon: sizeEls.icon });
    closeModal();
    state.selectedColor = null;
    state.selectedSize = null;
  });

  // Event listener for button which toggle the dropdown for sizes
  sizeEls.button.addEventListener('click', () => {
    toggleDropdown({ el: sizeEls.dropdown, icon: sizeEls.icon });
    sizeEls.placholder.textContent = 'Choose your size';
  });

  // Event listener for user click on the selected size
  sizeEls.dropdown.addEventListener('click', (e) => {
    if (e.target.classList.contains('product-modal__size-option')) {
      sizeEls.placholder.textContent = e.target.dataset.size;
      state.selectedSize = e.target.dataset.size;
      toggleDropdown({ open: false, el: sizeEls.dropdown, icon: sizeEls.icon });
    }
  });

  // Event listener for user click on the selected color
  colorEls.colorOptions.addEventListener('click', (e) => {
    if (e.target.classList.contains('product-modal__color-option')) {
      state.selectedColor = e.target.dataset.color;
      const options = [...colorEls.colorOptions.querySelectorAll('.product-modal__color-option')];
      const index = options.indexOf(e.target);

      options.forEach(opt=>opt.style.color="#000");
      e.target.style.color = "#fff";

      colorEls.indicator.style.transform = `translateX(${index*100}%)`;
    }
  });

  // Event listener for user click on the cart button
  modalEls.cartButton.addEventListener("click", ()=>{
    handleAddToCart();
  })

  // Event listener for popup close button
  popupEls.closeButton.addEventListener("click", ()=>{
    popupEls.popup.style.display = "none";
  })

  // Event listener for user click on any product
  document.querySelectorAll('.product-grid__item').forEach((productEl) => {
    productEl.addEventListener('click', () => {
      state.currentProductData = JSON.parse(productEl.dataset.product);
      openModal(state.currentProductData);
      state.selectedColor = colorEls.colorOptions.childNodes[0].dataset.color;
    });
  });
</script>

{% schema %}
{
  "name": "Grid",
  "settings": []
}
{% endschema %}
